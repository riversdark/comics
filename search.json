[
  {
    "objectID": "iam.html",
    "href": "iam.html",
    "title": "iam",
    "section": "",
    "text": "Example workflow for the processing of a set of mzML files including centroiding, features detection, feature linking and accurate mass search. The resulting data gets processed in a pandas data frame with features filtering (missing values, quality) and imputation of remaining missing values. Compounds detected during accurate mass search will be annotated in the resulting dataframe.\nimport os\nimport shutil\nimport requests\nimport pandas as pd\nimport pyopenms as oms\nimport numpy as np\nfrom sklearn.impute import KNNImputer\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.pipeline import Pipeline\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "iam.html#download-example-data",
    "href": "iam.html#download-example-data",
    "title": "iam",
    "section": "Download Example Data",
    "text": "Download Example Data\nExecute this cell only for the example workflow.\n\nDATA_FOLDER = \"IdByMz_Example\"\n\n# set path to your mzML files, or leave like this to use the example data\nfiles = os.path.join(os.getcwd(), DATA_FOLDER)\n\nif not os.path.isdir(os.path.join(os.getcwd(), DATA_FOLDER)):\n    os.mkdir(os.path.join(os.getcwd(), DATA_FOLDER))\n\nbase = \"https://abibuilder.cs.uni-tuebingen.de/archive/openms/Tutorials/Example_Data/Metabolomics/\"\nurls = [\n    \"datasets/2012_02_03_PStd_050_1.mzML\",\n    \"datasets/2012_02_03_PStd_050_2.mzML\",\n    \"datasets/2012_02_03_PStd_050_3.mzML\",\n    \"databases/PositiveAdducts.tsv\",\n    \"databases/NegativeAdducts.tsv\",\n    \"databases/HMDBMappingFile.tsv\",\n    \"databases/HMDB2StructMapping.tsv\",\n]\n\n# download the example data if it is not already present\nfor url in urls:\n    if not os.path.isfile(os.path.join(files, os.path.basename(url))):\n        request = requests.get(base + url, allow_redirects=True)\n        open(os.path.join(files, os.path.basename(url)), \"wb\").write(\n            request.content\n        )\n\n\n!ls -hal $files\n\ntotal 619M\ndrwxrwxr-x 2 ma ma 4.0K 10月 16 13:19 .\ndrwxrwxr-x 7 ma ma 4.0K 10月 16 12:14 ..\n-rw-rw-r-- 1 ma ma 211M 10月 11 21:38 2012_02_03_PStd_050_1.mzML\n-rw-rw-r-- 1 ma ma 199M 10月 11 21:38 2012_02_03_PStd_050_2.mzML\n-rw-rw-r-- 1 ma ma 194M 10月 11 21:38 2012_02_03_PStd_050_3.mzML\n-rw-rw-r-- 1 ma ma  16M 10月 11 21:38 HMDB2StructMapping.tsv\n-rw-rw-r-- 1 ma ma 824K 10月 11 21:38 HMDBMappingFile.tsv\n-rw-rw-r-- 1 ma ma  157 10月 11 21:38 NegativeAdducts.tsv\n-rw-rw-r-- 1 ma ma  357 10月 11 21:38 PositiveAdducts.tsv"
  },
  {
    "objectID": "iam.html#data-conversion-if-needed",
    "href": "iam.html#data-conversion-if-needed",
    "title": "iam",
    "section": "data conversion (if needed)",
    "text": "data conversion (if needed)\n\nmzxml_file = \"data/Tutorial_FileIO.mzXML\"\n\n\nsource\n\nexplore_mzxml_file\n\n explore_mzxml_file (mzxml_file)\n\nCheck mzML file.\n\nexplore_mzxml_file(mzxml_file)\n\nfile: data/Tutorial_FileIO.mzXML\nFile size: 0.0012 MB\nNumber of spectra: 3\nNumber of chromatograms: 0\n\n\n\nsource\n\n\nmzxml_to_mzml\n\n mzxml_to_mzml (mzxml_file:str, mzml_file:str)\n\nConvert mzXML to mzML.\nArgs: mzxml_file: Path to mzXML file. mzml_file: Path to mzML file.\nReturns: None.\n\nmzml_file = \"data/Tutorial_FileIO.mzML\"\n# convert mzXML to mzML\nmzxml_to_mzml(mzxml_file, mzml_file)\n\n\nsource\n\n\nexplore_mzml_file\n\n explore_mzml_file (mzml_file)\n\nCheck mzML file.\n\nexplore_mzxml_file(mzml_file)\n\nfile: Tutorial_FileIO.mzML\nFile size: 0.0080 MB\nNumber of spectra: 3\nNumber of chromatograms: 0"
  },
  {
    "objectID": "iam.html#centroiding",
    "href": "iam.html#centroiding",
    "title": "iam",
    "section": "Centroiding",
    "text": "Centroiding\nIf files are already centroided this step can bet omitted.\nMass spectrometry data can be represented in either profile mode or centroid mode. In profile mode, the data is continuous, whereas in centroid mode, each peak is represented by a single data point at its apex. Centroiding is the process of converting profile mode data into centroid mode, which reduces data complexity and size.\nin: path to MS data (files)\nout: path to centroided mzML files in a subfolder ‘centroid’ (files)\n\nfiles\n\n'/home/ma/git/comics/nbs/IdByMz_Example'\n\n\n\ndef centroid_files(files_path):\n    centroid_path = os.path.join(files_path, \"centroid\")\n    if os.path.exists(centroid_path):\n        shutil.rmtree(centroid_path)\n    os.mkdir(centroid_path)\n\n    for file in os.listdir(files_path):\n        if file.endswith(\".mzML\"):\n            exp_raw = oms.MSExperiment()\n            oms.MzMLFile().load(os.path.join(files_path, file), exp_raw)\n            exp_centroid = oms.MSExperiment()\n\n            oms.PeakPickerHiRes().pickExperiment(exp_raw, exp_centroid, True)\n\n            oms.MzMLFile().store(os.path.join(centroid_path, file), exp_centroid)\n            del exp_raw\n\n    return centroid_path\n\n\nfiles = centroid_files(files)\n\n\n!ls -hal $files\n\ntotal 596M\ndrwxrwxr-x 2 ma ma 4.0K 10月 16 13:20 .\ndrwxrwxr-x 3 ma ma 4.0K 10月 16 13:20 ..\n-rw-rw-r-- 1 ma ma 209M 10月 16 13:20 2012_02_03_PStd_050_1.mzML\n-rw-rw-r-- 1 ma ma 197M 10月 16 13:20 2012_02_03_PStd_050_2.mzML\n-rw-rw-r-- 1 ma ma 191M 10月 16 13:20 2012_02_03_PStd_050_3.mzML"
  },
  {
    "objectID": "iam.html#feature-detection",
    "href": "iam.html#feature-detection",
    "title": "iam",
    "section": "Feature Detection",
    "text": "Feature Detection\nIn mass spectrometry-based metabolomics, a feature map is essentially a representation of all the detected features (peaks) in a sample, where each feature is characterized by its mass-to-charge ratio (m/z), retention time (RT), and intensity.\nfeature detection involves identifying distinct peaks or sets of peaks in the mass spectra that correspond to specific ions. Each feature typically represents a different metabolite or molecule in the sample.\nin: path to centroid mzML files (files)\nout: list of FeatureMap (feature_maps)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Parameters:\n  else: warn(msg)\n/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Returns:\n  else: warn(msg)\n\nsource\n\ngenerate_feature_maps\n\n generate_feature_maps (files_path)\n\nGenerate feature maps from the .mzML files in the specified directory. TODO: expose the parameters of the mass trace detection, elution peak detection, and feature finding algorithms.\n\nfeature_maps = generate_feature_maps(files)\n\nProgress of 'mass trace detection':\n-- done [took 0.25 s (CPU), 0.00 s (Wall)] -- \nProgress of 'elution peak detection':\n-- done [took 0.09 s (CPU), 0.00 s (Wall)] -- \nProgress of 'assembling mass traces to features':\n-- done [took 0.01 s (CPU), 0.00 s (Wall)] -- \nTo ensure tracability of results please prefer mzML files as primary MS run.\nFilename: '2012_02_03_PStd_050_3'\nProgress of 'mass trace detection':\n-- done [took 0.21 s (CPU), 0.00 s (Wall)] -- \nProgress of 'elution peak detection':\n-- done [took 0.04 s (CPU), 0.00 s (Wall)] -- \nProgress of 'assembling mass traces to features':\n-- done [took 0.01 s (CPU), 0.00 s (Wall)] -- \nFilename: '2012_02_03_PStd_050_1'\nProgress of 'mass trace detection':\n-- done [took 0.21 s (CPU), 0.00 s (Wall)] -- \nProgress of 'elution peak detection':\n-- done [took 0.03 s (CPU), 0.00 s (Wall)] -- \nProgress of 'assembling mass traces to features':\n-- done [took 0.01 s (CPU), 0.00 s (Wall)] -- \nFilename: '2012_02_03_PStd_050_2'"
  },
  {
    "objectID": "iam.html#feature-map-retention-time-alignment",
    "href": "iam.html#feature-map-retention-time-alignment",
    "title": "iam",
    "section": "Feature Map Retention Time Alignment",
    "text": "Feature Map Retention Time Alignment\nRetention time is the time it takes for a compound to elute from the chromatography column. However, retention times can vary slightly between different runs due to minor inconsistencies in the chromatography system, such as temperature fluctuations or column aging. This variation can make it challenging to compare the same metabolites across different samples or runs.\nTo address the retention time variation issue, retention time alignment is performed to correct the shifts and stretch in the retention time axis so that the same metabolites align across different samples or runs.\nin: unaligned list of FeatureMap (feature_maps)\nout: list of FeatureMap aligned to the first feature map in the list (feature_maps)\n\n# get in index of feature map with highest number of features in feature map list\nref_index = [\n    i[0]\n    for i in sorted(\n        enumerate([fm.size() for fm in feature_maps]), key=lambda x: x[1]\n    )\n][-1]\n\naligner = oms.MapAlignmentAlgorithmPoseClustering()\n\naligner.setReference(feature_maps[ref_index])\n\nfor feature_map in feature_maps[:ref_index] + feature_maps[ref_index + 1 :]:\n    trafo = oms.TransformationDescription()\n    aligner.align(feature_map, trafo)\n    transformer = oms.MapAlignmentTransformer()\n    transformer.transformRetentionTimes(\n        feature_map, trafo, True\n    )  # store original RT as meta value"
  },
  {
    "objectID": "iam.html#visualization-of-rts-before-and-after-alignment",
    "href": "iam.html#visualization-of-rts-before-and-after-alignment",
    "title": "iam",
    "section": "Visualization of RTs before and after Alignment",
    "text": "Visualization of RTs before and after Alignment\n\nfmaps = (\n    [feature_maps[ref_index]]\n    + feature_maps[:ref_index]\n    + feature_maps[ref_index + 1 :]\n)\n\nfig = plt.figure(figsize=(10, 5))\n\nax = fig.add_subplot(1, 2, 1)\nax.set_title(\"consensus map before alignment\")\nax.set_ylabel(\"m/z\")\nax.set_xlabel(\"RT\")\n\n# use alpha value to display feature intensity\nax.scatter(\n    [f.getRT() for f in fmaps[0]],\n    [f.getMZ() for f in fmaps[0]],\n    alpha=np.asarray([f.getIntensity() for f in fmaps[0]])\n    / max([f.getIntensity() for f in fmaps[0]]),\n    marker='x'\n)\n\nfor fm in fmaps[1:]:\n    ax.scatter(\n        [f.getMetaValue(\"original_RT\") for f in fm],\n        [f.getMZ() for f in fm],\n        alpha=np.asarray([f.getIntensity() for f in fm])\n        / max([f.getIntensity() for f in fm]),\n        marker='x'\n    )\n\nax = fig.add_subplot(1, 2, 2)\nax.set_title(\"consensus map after alignment\")\nax.set_xlabel(\"RT\")\n\nfor fm in fmaps:\n    ax.scatter(\n        [f.getRT() for f in fm],\n        [f.getMZ() for f in fm],\n        alpha=np.asarray([f.getIntensity() for f in fm])\n        / max([f.getIntensity() for f in fm]),\n        marker='x'\n    )\n\nfig.tight_layout()\nfig.legend(\n    [fmap.getMetaValue(\"spectra_data\")[0].decode() for fmap in fmaps],\n    loc=\"lower center\",\n)\n# in some cases get file name elsewhere, e.g. fmap.getDataProcessing()[0].getMetaValue('parameter: out')\nfig.show()"
  },
  {
    "objectID": "iam.html#feature-linking",
    "href": "iam.html#feature-linking",
    "title": "iam",
    "section": "Feature Linking",
    "text": "Feature Linking\nAfter detecting features in individual samples, feature linking involves aligning common features across different samples to create consensus features based on their mass-to-charge ratio (m/z) and retention time values. This step ensures consistency in feature identification across different samples.\nin: list of FeatureMap (feature_maps)\nout: ConsensusMap (consensus_map)\n\n# Create the algorithm instance\nfeature_grouper = oms.FeatureGroupingAlgorithmQT()\n\n# Create the output consensus map\nconsensus_map = oms.ConsensusMap()\n\n# Create the column headers in the consensus map\nfile_descriptions = consensus_map.getColumnHeaders()\n\n# Iterate over the input feature maps\nfor i, feature_map in enumerate(feature_maps):\n    # Create the column header for this feature map\n    file_description = file_descriptions.get(i, oms.ColumnHeader())\n    file_description.filename = feature_map.getMetaValue(\"spectra_data\")[0].decode()\n    file_description.size = feature_map.size()\n    file_description.unique_id = feature_map.getUniqueId()\n    file_descriptions[i] = file_description\n\n# Set the column headers for the consensus map\nconsensus_map.setColumnHeaders(file_descriptions)\n\n# Run the feature grouping algorithm\nfeature_grouper.group(feature_maps, consensus_map)\n\nProgress of 'Linking features':\n-- done [took 0.01 s (CPU), 0.00 s (Wall)] --"
  },
  {
    "objectID": "iam.html#consensusmap-to-pandas-dataframe",
    "href": "iam.html#consensusmap-to-pandas-dataframe",
    "title": "iam",
    "section": "ConsensusMap to Pandas DataFrame",
    "text": "ConsensusMap to Pandas DataFrame\nin: ConsensusMap (consensus_map)\nout: DataFrame with RT, mz and quality from ConsensusMap (cm_df)\n\nintensities = consensus_map.get_intensity_df()\n\nmeta_data = consensus_map.get_metadata_df()[[\"RT\", \"mz\", \"quality\"]]\n\ncm_df = pd.concat([meta_data, intensities], axis=1)\ncm_df.reset_index(drop=True, inplace=True)\ncm_df\n\n\n\n\n\n\n\n\nRT\nmz\nquality\n2012_02_03_PStd_050_2\n2012_02_03_PStd_050_1\n2012_02_03_PStd_050_3\n\n\n\n\n0\n987.172969\n520.341258\n0.999133\n177918.687500\n175608.843750\n172152.781250\n\n\n1\n1096.524854\n522.357628\n0.998147\n168453.390625\n153836.234375\n167220.000000\n\n\n2\n978.811822\n544.341842\n0.998577\n57269.285156\n53295.808594\n50684.648438\n\n\n3\n1064.516704\n496.341724\n0.998203\n352452.625000\n313849.593750\n317855.750000\n\n\n4\n1237.484491\n282.279240\n0.998591\n187871.109375\n185114.437500\n178875.546875\n\n\n5\n1065.905411\n991.678178\n0.000000\n0.000000\n122542.742188\n0.000000\n\n\n6\n1302.588043\n806.580897\n0.000000\n60680.933594\n0.000000\n0.000000"
  },
  {
    "objectID": "iam.html#accurate-mass-search",
    "href": "iam.html#accurate-mass-search",
    "title": "iam",
    "section": "Accurate Mass Search",
    "text": "Accurate Mass Search\nin: ConsensusMap (consensus_map)\nout: DataFrame with AccurateMassSearchEngine results (ams_df)\n\nif files.endswith(\"centroid\"):\n    files = os.path.join(files, \"..\")\n\nams = oms.AccurateMassSearchEngine()\n\nams_params = ams.getParameters()\nams_params.setValue(\"ionization_mode\", \"negative\")\nams_params.setValue(\n    \"positive_adducts\", os.path.join(files, \"PositiveAdducts.tsv\")\n)\nams_params.setValue(\n    \"negative_adducts\", os.path.join(files, \"NegativeAdducts.tsv\")\n)\nams_params.setValue(\"db:mapping\", [os.path.join(files, \"HMDBMappingFile.tsv\")])\nams_params.setValue(\n    \"db:struct\", [os.path.join(files, \"HMDB2StructMapping.tsv\")]\n)\nams.setParameters(ams_params)\n\nmztab = oms.MzTab()\n\nams.init()\n\nams.run(consensus_map, mztab)\n\noms.MzTabFile().store(os.path.join(files, \"ids.tsv\"), mztab)\n\nwith open(os.path.join(files, \"ids_smsection.tsv\"), \"w\") as output, open(\n    os.path.join(files, \"ids.tsv\"), \"r\"\n) as input:\n    for line in input:\n        if line.lstrip().startswith(\"SM\"):\n            output.write(line[4:])\n\nams_df = pd.read_csv(os.path.join(files, \"ids_smsection.tsv\"), sep=\"\\t\")\n\nos.remove(os.path.join(files, \"ids.tsv\"))\nos.remove(os.path.join(files, \"ids_smsection.tsv\"))\n\nams_df\n\n3 spectra and 0 chromatograms stored.\n#Spectra that needed to and could be picked by MS-level:\n  MS-level 1: 0 / 7173\n7173 spectra and 1 chromatograms stored.\n#Spectra that needed to and could be picked by MS-level:\n  MS-level 1: 0 / 7173\n7173 spectra and 1 chromatograms stored.\n#Spectra that needed to and could be picked by MS-level:\n  MS-level 1: 0 / 7173\n7173 spectra and 1 chromatograms stored.\nRead 9635 entries from mapping file!\nRead 33 entries from adduct file '/home/ma/git/comics/nbs/IdByMz_Example/centroid/../PositiveAdducts.tsv'.\nRead 15 entries from adduct file '/home/ma/git/comics/nbs/IdByMz_Example/centroid/../NegativeAdducts.tsv'.\nHits by adduct: #peaks explained (# matching db entries)'\n  'M+Br;1-' : 1 (5)\n  'M+Cl;1-' : 1 (12)\n  'M+Na-2H;1-' : 1 (4)\n  'M-H2O-H;1-' : 1 (1)\n  'M-H;1-' : 4 (7)\n\n\n\n\n\n\n\n\n\n\nidentifier\nchemical_formula\nsmiles\ninchi_key\ndescription\nexp_mass_to_charge\ncalc_mass_to_charge\ncharge\nretention_time\ntaxid\n...\nsmallmolecule_abundance_stdev_study_variable[2]\nsmallmolecule_abundance_std_error_study_variable[2]\nsmallmolecule_abundance_study_variable[3]\nsmallmolecule_abundance_stdev_study_variable[3]\nsmallmolecule_abundance_std_error_study_variable[3]\nopt_global_mz_ppm_error\nopt_global_adduct_ion\nopt_global_isosim_score\nopt_global_neutral_mass\nopt_global_id_group\n\n\n\n\n0\nHMDB:HMDB02815\nC26H52NO7P\nCCCCCCCC\\C=C/CCCCCCCC(=O)OC[C@@]([H])(O)COP([O...\nInChI=1S/C26H52NO7P/c1-5-6-7-8-9-10-11-12-13-1...\nLysoPC(18:1(9Z))\n520.341258\n520.340863\n1.0\n987.172969\nNaN\n...\n0.0\n0.0\n177918.687500\n0.0\n0.0\n0.759592\nM-H;1-\n-1.0\n521.348535\n1\n\n\n1\nHMDB:HMDB10385\nC26H52NO7P\nCCCCCC\\C=C/CCCCCCCCCC(=O)OC[C@@]([H])(O)COP([O...\nInChI=1S/C26H52NO7P/c1-5-6-7-8-9-10-11-12-13-1...\nLysoPC(18:1(11Z))\n520.341258\n520.340863\n1.0\n987.172969\nNaN\n...\n0.0\n0.0\n177918.687500\n0.0\n0.0\n0.759592\nM-H;1-\n-1.0\n521.348535\n1\n\n\n2\nHMDB:HMDB10384\nC26H54NO7P\n[H][C@@](O)(COC(=O)CCCCCCCCCCCCCCCCC)COP([O-])...\nInChI=1S/C26H54NO7P/c1-5-6-7-8-9-10-11-12-13-1...\nLysoPC(18:0)\n522.357628\n522.356513\n1.0\n1096.524854\nNaN\n...\n0.0\n0.0\n168453.390625\n0.0\n0.0\n2.134368\nM-H;1-\n-1.0\n523.364905\n2\n\n\n3\nHMDB:HMDB11128\nC26H54NO7P\n[H][C@@](CO)(COP([O-])(=O)OCC[N+](C)(C)C)OC(=O...\nInChI=1S/C26H54NO7P/c1-5-6-7-8-9-10-11-12-13-1...\nLysoPC(0:0/18:0)\n522.357628\n522.356513\n1.0\n1096.524854\nNaN\n...\n0.0\n0.0\n168453.390625\n0.0\n0.0\n2.134368\nM-H;1-\n-1.0\n523.364905\n2\n\n\n4\nHMDB:HMDB10393\nC28H52NO7P\nCCCCCCCC\\C=C/C\\C=C/C\\C=C/CCCC(=O)OC[C@@]([H])(...\nInChI=1S/C28H52NO7P/c1-5-6-7-8-9-10-11-12-13-1...\nLysoPC(20:3(5Z,8Z,11Z))\n544.341842\n544.340863\n1.0\n978.811822\nNaN\n...\n0.0\n0.0\n57269.285156\n0.0\n0.0\n1.798724\nM-H;1-\n-1.0\n545.349119\n3\n\n\n5\nHMDB:HMDB10394\nC28H52NO7P\nCCCCC\\C=C/C\\C=C/C\\C=C/CCCCCCC(=O)OC[C@](O)([H]...\nInChI=1S/C28H52NO7P/c1-5-6-7-8-9-10-11-12-13-1...\nLysoPC(20:3(8Z,11Z,14Z))\n544.341842\n544.340863\n1.0\n978.811822\nNaN\n...\n0.0\n0.0\n57269.285156\n0.0\n0.0\n1.798724\nM-H;1-\n-1.0\n545.349119\n3\n\n\n6\nNaN\nNaN\nNaN\nNaN\nNaN\n496.341724\nNaN\nNaN\n1064.516704\nNaN\n...\n0.0\n0.0\n352452.625000\n0.0\n0.0\nNaN\nNaN\nNaN\nNaN\n4\n\n\n7\nHMDB:HMDB00269\nC18H39NO2\nCCCCCCCCCCCCCCC[C@@H](O)[C@@H](N)CO\nInChI=1S/C18H39NO2/c1-2-3-4-5-6-7-8-9-10-11-12...\nSphinganine\n282.279240\n282.280238\n1.0\n1237.484491\nNaN\n...\n0.0\n0.0\n187871.109375\n0.0\n0.0\n-3.533902\nM-H2O-H;1-\n-1.0\n301.297082\n5\n\n\n8\nHMDB:HMDB34146\nC18H37NO\nCCCCCCCCCCCCCCCCCC(N)=O\nInChI=1S/C18H37NO/c1-2-3-4-5-6-7-8-9-10-11-12-...\nOctadecanamide\n282.279240\n282.280238\n1.0\n1237.484491\nNaN\n...\n0.0\n0.0\n187871.109375\n0.0\n0.0\n-3.535241\nM-H;1-\n-1.0\n283.286517\n5\n\n\n9\nHMDB:HMDB55529\nC65H94O6\nCC\\C=C/C\\C=C/C\\C=C/C\\C=C/CCCCC(=O)OCC(COC(=O)C...\nInChI=1S/C65H94O6/c1-4-7-10-13-16-19-22-25-28-...\nTG(18:4(6Z,9Z,12Z,15Z)/22:6(4Z,7Z,10Z,13Z,16Z,...\n991.678178\n991.679709\n1.0\n1065.905411\nNaN\n...\n0.0\n0.0\n0.000000\n0.0\n0.0\n-1.543078\nM+Na-2H;1-\n-1.0\n970.703511\n6\n\n\n10\nHMDB:HMDB55791\nC65H94O6\nCC\\C=C/C\\C=C/C\\C=C/C\\C=C/C\\C=C/CCCC(=O)OCC(COC...\nInChI=1S/C65H94O6/c1-4-7-10-13-16-19-22-25-28-...\nTG(20:5(5Z,8Z,11Z,14Z,17Z)/20:5(5Z,8Z,11Z,14Z,...\n991.678178\n991.679709\n1.0\n1065.905411\nNaN\n...\n0.0\n0.0\n0.000000\n0.0\n0.0\n-1.543078\nM+Na-2H;1-\n-1.0\n970.703511\n6\n\n\n11\nHMDB:HMDB55797\nC65H94O6\nCC\\C=C/C\\C=C/C\\C=C/C\\C=C/C\\C=C/CCCC(=O)OCC(COC...\nInChI=1S/C65H94O6/c1-4-7-10-13-16-19-22-25-28-...\nTG(20:5(5Z,8Z,11Z,14Z,17Z)/22:6(4Z,7Z,10Z,13Z,...\n991.678178\n991.679709\n1.0\n1065.905411\nNaN\n...\n0.0\n0.0\n0.000000\n0.0\n0.0\n-1.543078\nM+Na-2H;1-\n-1.0\n970.703511\n6\n\n\n12\nHMDB:HMDB55941\nC65H94O6\nCC\\C=C/C\\C=C/C\\C=C/C\\C=C/CCCCC(=O)OC(COC(=O)CC...\nInChI=1S/C65H94O6/c1-4-7-10-13-16-19-22-25-28-...\nTG(22:6(4Z,7Z,10Z,13Z,16Z,19Z)/18:4(6Z,9Z,12Z,...\n991.678178\n991.679709\n1.0\n1065.905411\nNaN\n...\n0.0\n0.0\n0.000000\n0.0\n0.0\n-1.543078\nM+Na-2H;1-\n-1.0\n970.703511\n6\n\n\n13\nHMDB:HMDB55530\nC61H100O5\nCCCCCCCCCCCCCCCCCCOCC(COC(=O)CCCC\\C=C/C\\C=C/C\\...\nInChI=1S/C61H100O5/c1-4-7-10-13-16-19-22-25-28...\nTG(18:4(6Z,9Z,12Z,15Z)/22:6(4Z,7Z,10Z,13Z,16Z,...\n991.678178\n991.675962\n1.0\n1065.905411\nNaN\n...\n0.0\n0.0\n0.000000\n0.0\n0.0\n2.234911\nM+Br;1-\n-1.0\n912.759293\n6\n\n\n14\nHMDB:HMDB55535\nC61H100O5\nCCCCCCCCCCCCCCCCCCOC(COC(=O)CCCC\\C=C/C\\C=C/C\\C...\nInChI=1S/C61H100O5/c1-4-7-10-13-16-19-22-25-28...\nTG(18:4(6Z,9Z,12Z,15Z)/o-18:0/22:6(4Z,7Z,10Z,1...\n991.678178\n991.675962\n1.0\n1065.905411\nNaN\n...\n0.0\n0.0\n0.000000\n0.0\n0.0\n2.234911\nM+Br;1-\n-1.0\n912.759293\n6\n\n\n15\nHMDB:HMDB55792\nC61H100O5\nCCCCCCCCCCCCCCCCCCOCC(COC(=O)CCC\\C=C/C\\C=C/C\\C...\nInChI=1S/C61H100O5/c1-4-7-10-13-16-19-22-25-28...\nTG(20:5(5Z,8Z,11Z,14Z,17Z)/20:5(5Z,8Z,11Z,14Z,...\n991.678178\n991.675962\n1.0\n1065.905411\nNaN\n...\n0.0\n0.0\n0.000000\n0.0\n0.0\n2.234911\nM+Br;1-\n-1.0\n912.759293\n6\n\n\n16\nHMDB:HMDB55801\nC61H100O5\nCCCCCCCCCCCCCCCCCCOC(COC(=O)CCC\\C=C/C\\C=C/C\\C=...\nInChI=1S/C61H100O5/c1-4-7-10-13-16-19-22-25-28...\nTG(20:5(5Z,8Z,11Z,14Z,17Z)/o-18:0/20:5(5Z,8Z,1...\n991.678178\n991.675962\n1.0\n1065.905411\nNaN\n...\n0.0\n0.0\n0.000000\n0.0\n0.0\n2.234911\nM+Br;1-\n-1.0\n912.759293\n6\n\n\n17\nHMDB:HMDB55942\nC61H100O5\nCCCCCCCCCCCCCCCCCCOCC(COC(=O)CC\\C=C/C\\C=C/C\\C=...\nInChI=1S/C61H100O5/c1-4-7-10-13-16-19-22-25-28...\nTG(22:6(4Z,7Z,10Z,13Z,16Z,19Z)/18:4(6Z,9Z,12Z,...\n991.678178\n991.675962\n1.0\n1065.905411\nNaN\n...\n0.0\n0.0\n0.000000\n0.0\n0.0\n2.234911\nM+Br;1-\n-1.0\n912.759293\n6\n\n\n18\nHMDB:HMDB08062\nC44H86NO7P\nCCCCCCCCCCCCCCCCCC(=O)OCC(COP([O-])(=O)OCC[N+]...\nInChI=1S/C44H86NO7P/c1-6-8-10-12-14-16-18-20-2...\nPC(18:0/P-18:1(11Z))\n806.580897\n806.583592\n1.0\n1302.588043\nNaN\n...\n0.0\n0.0\n60680.933594\n0.0\n0.0\n-3.341290\nM+Cl;1-\n-1.0\n771.611496\n7\n\n\n19\nHMDB:HMDB08063\nC44H86NO7P\nCCCCCCCCCCCCCCCCCC(=O)OCC(COP([O-])(=O)OCC[N+]...\nInChI=1S/C44H86NO7P/c1-6-8-10-12-14-16-18-20-2...\nPC(18:0/P-18:1(9Z))\n806.580897\n806.583592\n1.0\n1302.588043\nNaN\n...\n0.0\n0.0\n60680.933594\n0.0\n0.0\n-3.341290\nM+Cl;1-\n-1.0\n771.611496\n7\n\n\n20\nHMDB:HMDB08094\nC44H86NO7P\nCCCCCCCCCCCCCCCC\\C=C/OC(COC(=O)CCCCCCCCC\\C=C/C...\nInChI=1S/C44H86NO7P/c1-6-8-10-12-14-16-18-20-2...\nPC(18:1(11Z)/P-18:0)\n806.580897\n806.583592\n1.0\n1302.588043\nNaN\n...\n0.0\n0.0\n60680.933594\n0.0\n0.0\n-3.341290\nM+Cl;1-\n-1.0\n771.611496\n7\n\n\n21\nHMDB:HMDB08127\nC44H86NO7P\nCCCCCCCCCCCCCCCC\\C=C/OC(COC(=O)CCCCCCC\\C=C/CCC...\nInChI=1S/C44H86NO7P/c1-6-8-10-12-14-16-18-20-2...\nPC(18:1(9Z)/P-18:0)\n806.580897\n806.583592\n1.0\n1302.588043\nNaN\n...\n0.0\n0.0\n60680.933594\n0.0\n0.0\n-3.341290\nM+Cl;1-\n-1.0\n771.611496\n7\n\n\n22\nHMDB:HMDB08324\nC44H86NO7P\nCCCCCCCCCCCCCC\\C=C/OC(COC(=O)CCCCCCCCC\\C=C/CCC...\nInChI=1S/C44H86NO7P/c1-6-8-10-12-14-16-18-20-2...\nPC(20:1(11Z)/P-16:0)\n806.580897\n806.583592\n1.0\n1302.588043\nNaN\n...\n0.0\n0.0\n60680.933594\n0.0\n0.0\n-3.341290\nM+Cl;1-\n-1.0\n771.611496\n7\n\n\n23\nHMDB:HMDB11216\nC44H86NO7P\nCCCCCCCCCCCCCC\\C=C/OC[C@]([H])(COP([O-])(=O)OC...\nInChI=1S/C44H86NO7P/c1-6-8-10-12-14-16-18-20-2...\nPC(P-16:0/20:1(11Z))\n806.580897\n806.583592\n1.0\n1302.588043\nNaN\n...\n0.0\n0.0\n60680.933594\n0.0\n0.0\n-3.341290\nM+Cl;1-\n-1.0\n771.611496\n7\n\n\n24\nHMDB:HMDB11242\nC44H86NO7P\nCCCCCCCCCCCCCCCC\\C=C/OC[C@]([H])(COP([O-])(=O)...\nInChI=1S/C44H86NO7P/c1-6-8-10-12-14-16-18-20-2...\nPC(P-18:0/18:1(11Z))\n806.580897\n806.583592\n1.0\n1302.588043\nNaN\n...\n0.0\n0.0\n60680.933594\n0.0\n0.0\n-3.341290\nM+Cl;1-\n-1.0\n771.611496\n7\n\n\n25\nHMDB:HMDB11243\nC44H86NO7P\nCCCCCCCCCCCCCCCC\\C=C/OC[C@]([H])(COP([O-])(=O)...\nInChI=1S/C44H86NO7P/c1-6-8-10-12-14-16-18-20-2...\nPC(P-18:0/18:1(9Z))\n806.580897\n806.583592\n1.0\n1302.588043\nNaN\n...\n0.0\n0.0\n60680.933594\n0.0\n0.0\n-3.341290\nM+Cl;1-\n-1.0\n771.611496\n7\n\n\n26\nHMDB:HMDB11274\nC44H86NO7P\nCCCCCCCCCCCCCCCCCC(=O)O[C@]([H])(CO\\C=C/CCCCCC...\nInChI=1S/C44H86NO7P/c1-6-8-10-12-14-16-18-20-2...\nPC(P-18:1(11Z)/18:0)\n806.580897\n806.583592\n1.0\n1302.588043\nNaN\n...\n0.0\n0.0\n60680.933594\n0.0\n0.0\n-3.341290\nM+Cl;1-\n-1.0\n771.611496\n7\n\n\n27\nHMDB:HMDB11307\nC44H86NO7P\nCCCCCCCCCCCCCCCCCC(=O)O[C@]([H])(CO\\C=C/CCCCCC...\nInChI=1S/C44H86NO7P/c1-6-8-10-12-14-16-18-20-2...\nPC(P-18:1(9Z)/18:0)\n806.580897\n806.583592\n1.0\n1302.588043\nNaN\n...\n0.0\n0.0\n60680.933594\n0.0\n0.0\n-3.341290\nM+Cl;1-\n-1.0\n771.611496\n7\n\n\n28\nHMDB:HMDB13418\nC44H86NO7P\nCCCCCCCCCCCCCCCCCCOC[C@]([H])(COP([O-])(=O)OCC...\nInChI=1S/C44H86NO7P/c1-6-8-10-12-14-16-18-20-2...\nPC(o-18:0/18:2(9Z,12Z))\n806.580897\n806.583592\n1.0\n1302.588043\nNaN\n...\n0.0\n0.0\n60680.933594\n0.0\n0.0\n-3.341290\nM+Cl;1-\n-1.0\n771.611496\n7\n\n\n29\nHMDB:HMDB13428\nC44H86NO7P\nCCCCCCCC\\C=C/CCCCCCCCOC[C@]([H])(COP([O-])(=O)...\nInChI=1S/C44H86NO7P/c1-6-8-10-12-14-16-18-20-2...\nPC(o-18:1(9Z)/18:1(11Z))\n806.580897\n806.583592\n1.0\n1302.588043\nNaN\n...\n0.0\n0.0\n60680.933594\n0.0\n0.0\n-3.341290\nM+Cl;1-\n-1.0\n771.611496\n7\n\n\n\n\n30 rows × 34 columns\n\n\n\n\n# save amss_df as csv\nams_df.to_csv(os.path.join(files, \"ams_df.csv\"))"
  },
  {
    "objectID": "iam.html#data-filtering-and-imputation",
    "href": "iam.html#data-filtering-and-imputation",
    "title": "iam",
    "section": "Data Filtering and Imputation",
    "text": "Data Filtering and Imputation\nin: unfiltered ConsensusMap DataFrame (cm_df)\nout: features below minimum quality and with too many missing values removed, remaining missing values imputed with KNN algorithm (cm_df)\n\nallowed_missing_values = 1\nmin_feature_quality = 0.8\nn_nearest_neighbours = 2\n\n# drop features that have more then the allowed number of missing values or are below minimum feature quality\nto_drop = []\n\nfor i, row in cm_df.iterrows():\n    if (\n        row.isna().sum() &gt; allowed_missing_values\n        or row[\"quality\"] &lt; min_feature_quality\n    ):\n        to_drop.append(i)\n\ncm_df.drop(index=cm_df.index[to_drop], inplace=True)\n\n# Data imputation with KNN\nimputer = Pipeline(\n    [\n        (\"imputer\", KNNImputer(n_neighbors=2)),\n        (\n            \"pandarizer\",\n            FunctionTransformer(\n                lambda x: pd.DataFrame(x, columns=cm_df.columns)\n            ),\n        ),\n    ]\n)\n\ncm_df = imputer.fit_transform(cm_df)\ncm_df\n\n\n\n\n\n\n\n\nRT\nmz\nquality\n2012_02_03_PStd_050_2\n2012_02_03_PStd_050_1\n2012_02_03_PStd_050_3\n\n\n\n\n0\n987.172969\n520.341258\n0.999133\n177918.687500\n175608.843750\n172152.781250\n\n\n1\n1096.524854\n522.357628\n0.998147\n168453.390625\n153836.234375\n167220.000000\n\n\n2\n978.811822\n544.341842\n0.998577\n57269.285156\n53295.808594\n50684.648438\n\n\n3\n1064.516704\n496.341724\n0.998203\n352452.625000\n313849.593750\n317855.750000\n\n\n4\n1237.484491\n282.279240\n0.998591\n187871.109375\n185114.437500\n178875.546875\n\n\n\n\n\n\n\nAnnotate Features with Identified Compounds in ConsensusMap DataFrame without identifications (cm_df) and AccurateMassSearch DataFrame (ams_df)\nout: ConsensusMap DataFrame with new identifications column (id_df)\n\nid_df = cm_df\n\nid_df[\"identifications\"] = pd.Series([\"\" for x in range(len(id_df.index))])\n\nfor rt, mz, description in zip(\n    ams_df[\"retention_time\"],\n    ams_df[\"exp_mass_to_charge\"],\n    ams_df[\"description\"],\n):\n    indices = id_df.index[\n        np.isclose(id_df[\"mz\"], float(mz), atol=1e-05)\n        & np.isclose(id_df[\"RT\"], float(rt), atol=1e-05)\n    ].tolist()\n    for index in indices:\n        if description != \"null\":\n            id_df.loc[index, \"identifications\"] += str(description) + \";\"\nid_df[\"identifications\"] = [\n    item[:-1] if \";\" in item else \"\" for item in id_df[\"identifications\"]\n]\nid_df.to_csv(os.path.join(files, \"result.tsv\"), sep=\"\\t\", index=False)\nid_df\n\n\n\n\n\n\n\n\nRT\nmz\nquality\n2012_02_03_PStd_050_2\n2012_02_03_PStd_050_1\n2012_02_03_PStd_050_3\nidentifications\n\n\n\n\n0\n987.172969\n520.341258\n0.999133\n177918.687500\n175608.843750\n172152.781250\nLysoPC(18:1(9Z));LysoPC(18:1(11Z))\n\n\n1\n1096.524854\n522.357628\n0.998147\n168453.390625\n153836.234375\n167220.000000\nLysoPC(18:0);LysoPC(0:0/18:0)\n\n\n2\n978.811822\n544.341842\n0.998577\n57269.285156\n53295.808594\n50684.648438\nLysoPC(20:3(5Z,8Z,11Z));LysoPC(20:3(8Z,11Z,14Z))\n\n\n3\n1064.516704\n496.341724\n0.998203\n352452.625000\n313849.593750\n317855.750000\nnan\n\n\n4\n1237.484491\n282.279240\n0.998591\n187871.109375\n185114.437500\n178875.546875\nSphinganine;Octadecanamide"
  },
  {
    "objectID": "iam.html#visualize-consensus-features-with-identifications",
    "href": "iam.html#visualize-consensus-features-with-identifications",
    "title": "iam",
    "section": "Visualize Consensus Features with Identifications",
    "text": "Visualize Consensus Features with Identifications\n\nfig = px.scatter(id_df, x=\"RT\", y=\"mz\", hover_name=\"identifications\")\nfig.update_layout(title=\"Consensus features with identifications (hover)\")\nfig.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "comics",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "comics",
    "section": "Install",
    "text": "Install\npip install comics"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "comics",
    "section": "How to use",
    "text": "How to use\nFill me in please!"
  },
  {
    "objectID": "ump.html",
    "href": "ump.html",
    "title": "ump",
    "section": "",
    "text": "import os\nimport urllib.request\nimport pyopenms as oms\n\nThe universal workflow for untargeted metabolomics always consists of feature detection in the individual MS sample files and their linkage to consensus features with common m/z and retention time values.\nIn addition, there are optional steps such as adduct detection and annotation of features with associated MS2 spectra.\ndownload two example mzML files.\n\ngh = \"https://raw.githubusercontent.com/OpenMS/pyopenms-docs/master\"\nURL1 = gh + \"/src/data/Metabolomics_1.mzML\"\nURL2 = gh + \"/src/data/Metabolomics_2.mzML\"\nPROJ_DIR = 'ump/'\n\n# create project directory if it doesn't exist\nif not os.path.exists(PROJ_DIR):\n    os.makedirs(PROJ_DIR)\n\n# download data to project directory if it doesn't exist\nif not os.path.exists(PROJ_DIR + 'Metabolomics_1.mzML'):\n    urllib.request.urlretrieve(URL1, PROJ_DIR + 'Metabolomics_1.mzML')\nif not os.path.exists(PROJ_DIR + 'Metabolomics_2.mzML'):\n    urllib.request.urlretrieve(URL2, PROJ_DIR + 'Metabolomics_2.mzML')\n\n\n# change working directory to project directory\nos.chdir(PROJ_DIR)\n\n\n!pwd\n\n/home/ma/git/comics/nbs/ump\n\n\n\nmzML_files = [\"Metabolomics_1.mzML\", \"Metabolomics_2.mzML\"]\n\nFor each mzML file do mass trace, elution peak and features detection.\n\nsource\n\nprocess_files\n\n process_files (mzML_files)\n\nProcess a list of mzML files and return a list of feature maps.\nParameters: mzML_files (list): A list of mzML file paths to be processed.\nReturns: list: A list of feature maps.\n\n# process files\nfeature_maps = process_files(mzML_files)\n\nProcessing file: Metabolomics_1.mzML\nProgress of 'mass trace detection':\n-- done [took 0.03 s (CPU), 0.01 s (Wall)] -- \nProgress of 'elution peak detection':\n-- done [took 0.98 s (CPU), 0.02 s (Wall)] -- \nProgress of 'assembling mass traces to features':\nProcessing file: Metabolomics_2.mzML\nLoading metabolite isotope model with 5% RMS error\n-- done [took 0.75 s (CPU), 0.01 s (Wall)] -- \nProgress of 'mass trace detection':\n-- done [took 0.01 s (CPU), 0.00 s (Wall)] -- \nProgress of 'elution peak detection':\n-- done [took 0.44 s (CPU), 0.01 s (Wall)] -- \nProgress of 'assembling mass traces to features':\n-- done [took 0.29 s (CPU), 0.01 s (Wall)] -- \n\n\nretention times alignment\nbased on the feature map with the highest number of features (reference map).\nMap alignment is a process of aligning multiple mass spectrometry maps to a common reference map, which is typically the map with the most features or the highest quality. The goal of map alignment is to correct for small variations in retention time and m/z values between maps, so that corresponding features in different maps can be accurately compared and quantified.\n\n# use as reference for alignment, the file with the largest number of features\n# (works well if you have a pooled QC for example)\nref_index = feature_maps.index(sorted(feature_maps, key=lambda x: x.size())[-1])\n\naligner = oms.MapAlignmentAlgorithmPoseClustering()\n\ntrafos = {}\n\n# parameter optimization\naligner_par = aligner.getDefaults()\naligner_par.setValue(\"max_num_peaks_considered\", -1)  # infinite\naligner_par.setValue(\n    \"pairfinder:distance_MZ:max_difference\", 10.0\n)  # Never pair features with larger m/z distance\naligner_par.setValue(\"pairfinder:distance_MZ:unit\", \"ppm\")\naligner.setParameters(aligner_par)\naligner.setReference(feature_maps[ref_index])\n\nfor feature_map in feature_maps[:ref_index] + feature_maps[ref_index + 1 :]:\n    trafo = oms.TransformationDescription()  # save the transformed data points\n    aligner.align(feature_map, trafo)\n    trafos[feature_map.getMetaValue(\"spectra_data\")[0].decode()] = trafo\n    transformer = oms.MapAlignmentTransformer()\n    transformer.transformRetentionTimes(feature_map, trafo, True)\n\n\nfeature_maps\n\n[&lt;pyopenms._dataframes._FeatureMapDF&gt;,\n &lt;pyopenms._dataframes._FeatureMapDF&gt;]\n\n\nAlign mzML files aligment based on FeatureMap alignment (optional, only for GNPS).\nGNPS is a web-based mass spectrometry ecosystem that aims to be an open-access knowledge base for community-wide organization and sharing of raw, processed or identified tandem mass (MS/MS) spectrometry data.\n\nfor file in mzML_files:\n    exp = oms.MSExperiment()\n    oms.MzMLFile().load(file, exp)\n    exp.sortSpectra(True)\n    exp.setMetaValue(\"mzML_path\", file)\n    if file not in trafos.keys():\n        oms.MzMLFile().store(file[:-5] + \"_aligned.mzML\", exp)\n        continue\n    transformer = oms.MapAlignmentTransformer()\n    trafo_description = trafos[file]\n    transformer.transformRetentionTimes(exp, trafo_description, True)\n    oms.MzMLFile().store(file[:-5] + \"_aligned.mzML\", exp)\nmzML_files = [file[:-5] + \"_aligned.mzML\" for file in mzML_files]\n\nMap MS2 spectra to features as PeptideIdentification objects (optional, only for GNPS).\n\nfeature_maps_mapped = []\nuse_centroid_rt = False\nuse_centroid_mz = True\nmapper = oms.IDMapper()\nfor file in mzML_files:\n    exp = oms.MSExperiment()\n    oms.MzMLFile().load(file, exp)\n    for i, feature_map in enumerate(feature_maps):\n        if feature_map.getMetaValue(\"spectra_data\")[\n            0\n        ].decode() == exp.getMetaValue(\"mzML_path\"):\n            peptide_ids = []\n            protein_ids = []\n            mapper.annotate(\n                feature_map,\n                peptide_ids,\n                protein_ids,\n                use_centroid_rt,\n                use_centroid_mz,\n                exp,\n            )\n            fm_new = oms.FeatureMap(feature_map)\n            fm_new.clear(False)\n            # set unique identifiers to protein and peptide identifications\n            prot_ids = []\n            if len(feature_map.getProteinIdentifications()) &gt; 0:\n                prot_id = feature_map.getProteinIdentifications()[0]\n                prot_id.setIdentifier(f\"Identifier_{i}\")\n                prot_ids.append(prot_id)\n            fm_new.setProteinIdentifications(prot_ids)\n            for feature in feature_map:\n                pep_ids = []\n                for pep_id in feature.getPeptideIdentifications():\n                    pep_id.setIdentifier(f\"Identifier_{i}\")\n                    pep_ids.append(pep_id)\n                feature.setPeptideIdentifications(pep_ids)\n                fm_new.push_back(feature)\n            feature_maps_mapped.append(fm_new)\nfeature_maps = feature_maps_mapped\n\nIDMapper warning: at least one feature has no convex hull - using centroid coordinates for matching\n1052 spectra and 1 chromatograms stored.\n&lt;Loading metabolite isotope model with 5% RMS error&gt; occurred 2 times\n963 spectra and 1 chromatograms stored.\nUnassigned peptides: 0\nPeptides assigned to exactly one feature: 0\nPeptides assigned to multiple features: 0\nUnassigned and unidentified precursors: 718\nUnidentified precursor assigned to exactly one feature: 0\nUnidentified precursor assigned to multiple features: 0\nFeature annotation with identifications:\n    no ID: 74\n    single ID: 0\n    multiple IDs (identical): 0\n    multiple IDs (divergent): 0\n\n\nUnassigned peptides: 0\nPeptides assigned to exactly one feature: 0\nPeptides assigned to multiple features: 0\nUnassigned and unidentified precursors: 634\nUnidentified precursor assigned to exactly one feature: 0\nUnidentified precursor assigned to multiple features: 0\nFeature annotation with identifications:\n    no ID: 70\n    single ID: 0\n    multiple IDs (identical): 0\n    multiple IDs (divergent): 0\n\n\n\n\nDetect adducts (optional, only for SIRIUS and GNPS Ion Identity Molecular Networking).\n\nfeature_maps_adducts = []\nfor feature_map in feature_maps:\n    mfd = oms.MetaboliteFeatureDeconvolution()\n    mdf_par = mfd.getDefaults()\n    mdf_par.setValue(\n        \"potential_adducts\",\n        [\n            b\"H:+:0.4\",\n            b\"Na:+:0.2\",\n            b\"NH4:+:0.2\",\n            b\"H-1O-1:+:0.1\",\n            b\"H-3O-2:+:0.1\",\n        ],\n    )\n    mfd.setParameters(mdf_par)\n    feature_map_adduct = oms.FeatureMap()\n    mfd.compute(feature_map, feature_map_adduct, oms.ConsensusMap(), oms.ConsensusMap())\n    feature_maps_adducts.append(feature_map_adduct)\nfeature_maps = feature_maps_adducts\n\n# for SIRIUS store the feature maps as featureXML files!\nfor feature_map in feature_maps:\n    oms.FeatureXMLFile().store(\n        feature_map.getMetaValue(\"spectra_data\")[0].decode()[:-4]\n        + \"featureXML\",\n        feature_map,\n    )\n\nMassExplainer table size: 312\nGenerating Masses with threshold: -6.90776 ...\ndone\n4 of 17 valid net charge compomer results did not pass the feature charge constraints\nInferring edges raised edge count from 19 to 19\nFound 19 putative edges (of 53) and avg hit-size of 1.21053\nUsing solver 'coinor' ...\nOptimal solution found!\n Branch and cut took 0.001407 seconds,  with objective value: 0.6032.\nILP score is: 0.6032\nAgreeing charges: 26/26\nMassExplainer table size: 312\nGenerating Masses with threshold: -6.90776 ...\ndone\n28 of 85 valid net charge compomer results did not pass the feature charge constraints\nInferring edges raised edge count from 80 to 80\nFound 80 putative edges (of 165) and avg hit-size of 1.5125\nUsing solver 'coinor' ...\nOptimal solution found!\n Branch and cut took 0.006082 seconds,  with objective value: 1.59.\nILP score is: 1.59\nAgreeing charges: 86/86\n\n\nLink features in a ConsensusMap\n\nfeature_grouper = oms.FeatureGroupingAlgorithmKD()\n\nconsensus_map = oms.ConsensusMap()\nfile_descriptions = consensus_map.getColumnHeaders()\n\nfor i, feature_map in enumerate(feature_maps):\n    file_description = file_descriptions.get(i, oms.ColumnHeader())\n    file_description.filename = os.path.basename(\n        feature_map.getMetaValue(\"spectra_data\")[0].decode()\n    )\n    file_description.size = feature_map.size()\n    file_descriptions[i] = file_description\n\nfeature_grouper.group(feature_maps, consensus_map)\nconsensus_map.setColumnHeaders(file_descriptions)\nconsensus_map.setUniqueIds()\noms.ConsensusXMLFile().store(\"FeatureMatrix.consensusXML\", consensus_map)\n\nProgress of 'computing RT transformations':\n.\n&lt;IDMapper warning: at least one feature has no convex hull - using centroid coordinates for matching&gt; occurred 2 times\n..\nWarning: a significant portion of your decharged molecules have gapped, even-numbered charge ladders (1 of 9)This might indicate a too low charge interval being tested.\n.\n&lt;..&gt; occurred 2 times\nWarning: Only 3 data points for LOWESS fit of map 0. Consider adjusting RT or m/z tolerance or max_pairwise_log_fc, decreasing min_rel_cc_size, or increasing max_nr_conflicts.\nWarning: Only 3 data points for LOWESS fit of map 1. Consider adjusting RT or m/z tolerance or max_pairwise_log_fc, decreasing min_rel_cc_size, or increasing max_nr_conflicts.\n-- done [took 0.00 s (CPU), 0.00 s (Wall)] -- \nProgress of 'linking features':\n-- done [took 0.00 s (CPU), 0.00 s (Wall)] -- \n\n\nTo get a final feature matrix in a table format, export the :consensus features&lt;consensus feature&gt; in a pandas DataFrame.\n\ndf = consensus_map.get_df()\ndf\n\n\n\n\n\n\n\n\nsequence\ncharge\nRT\nmz\nquality\nMetabolomics_2.mzML\nMetabolomics_1.mzML\n\n\nid\n\n\n\n\n\n\n\n\n\n\n\n13912485389533679555\nNone\n1\n498.987864\n279.093382\n0.016148\n1.407178e+07\n1.321831e+07\n\n\n5323241867540334364\nNone\n1\n544.292638\n209.153597\n0.001844\n1.684743e+06\n1.468729e+06\n\n\n13121575549748074191\nNone\n1\n498.987864\n301.075331\n0.002225\n1.974032e+06\n2.007466e+06\n\n\n9557923106321682466\nNone\n1\n338.024453\n487.360726\n0.000024\n0.000000e+00\n7.800514e+05\n\n\n1290386448153009373\nNone\n2\n363.665959\n434.310873\n0.000031\n0.000000e+00\n8.836031e+05\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3848966934665824239\nNone\n1\n375.864638\n687.395983\n0.003420\n1.458801e+06\n0.000000e+00\n\n\n3621532977705013062\nNone\n1\n375.864638\n669.385475\n0.003618\n1.543885e+06\n0.000000e+00\n\n\n16569306976259715690\nNone\n1\n337.010453\n651.374785\n0.001586\n6.574662e+05\n0.000000e+00\n\n\n13429430511397856625\nNone\n1\n358.849872\n651.374670\n0.002029\n8.525544e+05\n0.000000e+00\n\n\n2001074038493883911\nNone\n1\n492.839724\n691.367429\n0.001565\n6.695802e+05\n0.000000e+00\n\n\n\n\n141 rows × 7 columns"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()"
  }
]