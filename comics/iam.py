# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_iam.ipynb.

# %% auto 0
__all__ = ['explore_mzxml_file', 'mzxml_to_mzml', 'explore_mzml_file', 'generate_feature_maps']

# %% ../nbs/01_iam.ipynb 3
import os
import shutil
import requests
import pandas as pd
import pyopenms as oms
import numpy as np
from sklearn.impute import KNNImputer
from sklearn.preprocessing import FunctionTransformer
from sklearn.pipeline import Pipeline
import plotly.graph_objects as go
import plotly.express as px
import matplotlib.pyplot as plt


# %% ../nbs/01_iam.ipynb 9
# read a mzXML file and print key info
def explore_mzxml_file(mzxml_file):
    """Check mzML file.
    """
    print("file:", mzxml_file)
    print("File size: {:.4f} MB".format(os.path.getsize(mzxml_file) / 1024 / 1024))
    exp = oms.MSExperiment()
    oms.FileHandler().loadExperiment(mzxml_file, exp)
    print("Number of spectra:", exp.size())
    print("Number of chromatograms:", exp.getNrChromatograms())


# %% ../nbs/01_iam.ipynb 11
# convert mzXML to mzML
def mzxml_to_mzml(mzxml_file: str, mzml_file: str) -> None:
    """Convert mzXML to mzML.

    Args:
        mzxml_file: Path to mzXML file.
        mzml_file: Path to mzML file.

    Returns:
        None.

    """
    mzxml = oms.MzXMLFile()
    exp = oms.MSExperiment()
    mzxml.load(mzxml_file, exp)
    oms.MzMLFile().store(mzml_file, exp)


# %% ../nbs/01_iam.ipynb 13
# read a mzML file and print key info
def explore_mzml_file(mzml_file):
    """Check mzML file.
    """
    print("file:", mzml_file)
    print("File size: {:.4f} MB".format(os.path.getsize(mzml_file) / 1024 / 1024))
    exp = oms.MSExperiment()
    oms.FileHandler().loadExperiment(mzml_file, exp)
    print("Number of spectra:", exp.size())
    print("Number of chromatograms:", exp.getNrChromatograms())

# %% ../nbs/01_iam.ipynb 21
def generate_feature_maps(files_path):
    """
    Generate feature maps from the .mzML files in the specified directory.
    TODO: expose the parameters of the mass trace detection, elution peak detection, and 
          feature finding algorithms.

    Parameters:
    -----------
    files_path : str
        The path to the directory containing the .mzML files.

    Returns:
    --------
    feature_maps : list of pyopenms.FeatureMap
        A list of feature maps generated from the .mzML files.
    """
    feature_maps = []

    # Loop through each .mzML file in the directory
    for file in os.listdir(files_path):
        if file.endswith(".mzML"):
            # Load the file into an MSExperiment object
            exp = oms.MSExperiment()
            oms.MzMLFile().load(os.path.join(files_path, file), exp)

            # Sort the spectra by ascending order of RT
            exp.sortSpectra(True)

            # Perform mass trace detection
            mass_traces = []
            mtd = oms.MassTraceDetection()
            mtd_params = mtd.getDefaults()
            mtd_params.setValue("mass_error_ppm", 5.0)
            mtd_params.setValue("noise_threshold_int", 1000.0)
            mtd.setParameters(mtd_params)
            mtd.run(exp, mass_traces, 0)

            # Perform elution peak detection
            mass_traces_split = []
            mass_traces_final = []
            epd = oms.ElutionPeakDetection()
            epd_params = epd.getDefaults()
            epd_params.setValue("width_filtering", "fixed")
            epd.setParameters(epd_params)
            epd.detectPeaks(mass_traces, mass_traces_split)

            if epd.getParameters().getValue("width_filtering") == "auto":
                epd.filterByPeakWidth(mass_traces_split, mass_traces_final)
            else:
                mass_traces_final = mass_traces_split

            # Perform feature finding
            feature_map = oms.FeatureMap()
            feat_chrom = []
            ffm = oms.FeatureFindingMetabo()
            ffm_params = ffm.getDefaults()
            ffm_params.setValue("isotope_filtering_model", "none")
            ffm_params.setValue("remove_single_traces", "true")
            ffm_params.setValue("mz_scoring_by_elements", "false")
            ffm_params.setValue("report_convex_hulls", "true")
            ffm.setParameters(ffm_params)
            ffm.run(mass_traces_final, feature_map, feat_chrom)

            # Set the unique IDs and primary MS run path for the feature map
            feature_map.setUniqueIds()
            feature_map.setPrimaryMSRunPath([file[:-5].encode()])

            # Append the feature map to the list of feature maps
            feature_maps.append(feature_map)

    return feature_maps
