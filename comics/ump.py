# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_ump.ipynb.

# %% auto 0
__all__ = ['process_files']

# %% ../nbs/02_ump.ipynb 2
import os
import urllib.request
import pyopenms as oms


# %% ../nbs/02_ump.ipynb 10
def process_files(mzML_files):
    """
    Process a list of mzML files and return a list of feature maps.
    
    Parameters:
    mzML_files (list): A list of mzML file paths to be processed.
    
    Returns:
    list: A list of feature maps.
    """
    feature_maps = []
    for file in mzML_files:
        print("Processing file:", file)
        # load mzML file into MSExperiment
        exp = oms.MSExperiment()
        oms.MzMLFile().load(file, exp)  # load each mzML file to an OpenMS file format (MSExperiment)

        # mass trace detection
        mass_traces = ([])  # introduce an empty list where the mass traces will be loaded
        mtd = oms.MassTraceDetection()
        mtd_par = (mtd.getDefaults())  # get the default parameters in order to edit them
        mtd_par.setValue("mass_error_ppm", 10.0)  # high-res instrument, orbitraps
        mtd_par.setValue("noise_threshold_int", 1.0e04)  # data-dependent (usually works for orbitraps)
        mtd.setParameters(mtd_par)  # set the new parameters
        mtd.run(exp, mass_traces, 0)  # run mass trace detection

        # elution peak detection
        mass_traces_deconvol = []
        epd = oms.ElutionPeakDetection()
        epd_par = epd.getDefaults()
        epd_par.setValue(
            "width_filtering", "fixed"
        )  # The fixed setting filters out mass traces outside the [min_fwhm: 1.0, max_fwhm: 60.0] interval
        epd.setParameters(epd_par)
        epd.detectPeaks(mass_traces, mass_traces_deconvol)

        # feature detection
        feature_map = oms.FeatureMap()  # output features
        chrom_out = []  # output chromatograms
        ffm = oms.FeatureFindingMetabo()
        ffm_par = ffm.getDefaults()
        ffm_par.setValue(
            "remove_single_traces", "true"
        )  # remove mass traces without satellite isotopic traces
        ffm.setParameters(ffm_par)
        ffm.run(mass_traces_deconvol, feature_map, chrom_out)
        feature_map.setUniqueIds()  # Assigns a new, valid unique id per feature
        feature_map.setPrimaryMSRunPath(
            [file.encode()]
        )  # Sets the file path to the primary MS run (usually the mzML file)
        feature_maps.append(feature_map)
    return feature_maps
